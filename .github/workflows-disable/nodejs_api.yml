# #This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# #For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages

# name: CI/CD Pipeline for NodeJS

# on:
#   push:
#     branches:
#       - main
#       - dev
#       - staging

# env:
#   my_env: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/dev' && 'sandbox' || github.ref == 'refs/heads/staging' && 'staging' || 'none' }}

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: Node.js  # Set default working directory for all steps

#     steps:
#       # Step 1: Checkout the code
#       - name: Checkout Code
#         uses: actions/checkout@v2

#       # Step 2: Set up Node.js environment
#       - name: Set up Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: '18' # or your required version

#       # Step 3: Install dependencies
#       - name: Install Dependencies
#         run: npm install

#       # Step 4: Run tests (quality checks)
#       - name: Run Tests
#         run: npm run test

#       # Step 6: Security checks (e.g., npm audit)
#       - name: Run Security Audit
#         run: npm audit
  
#   docker-build-and-push:
#     runs-on: ubuntu-latest
#     needs: build
#     defaults:
#       run:
#         working-directory: Node.js  # Set default working directory for all steps
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v2

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and Push Docker Image
#         run: |
#           docker build -t ${{ secrets.DOCKER_USERNAME }}/my-api-server:${{ env.my_env == 'production' && 'latest' || env.my_env }} .
#           docker push ${{ secrets.DOCKER_USERNAME }}/my-api-server:${{ env.my_env == 'production' && 'latest' || env.my_env }}

#   deploy-to-aws-ec2:
#     needs: docker-build-and-push
#     runs-on: ubuntu-latest
#     environment: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/dev' && 'sandbox' || github.ref == 'refs/heads/staging' && 'staging' || 'none' }} # Define the env for sandbox/staging/production

#     steps:
#       - name: Add Private SSH Key to shh to EC2 instances.
#         run: |
#           echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > /tmp/ec2-key.pem
#           chmod 600 /tmp/ec2-key.pem

#       - name: Get IP addresses of aws ec2 instances
#         id: ip_addresses
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
#           EC2_TAG_NAME: ${{ secrets.EC2_TAG_NAME }}  # Use EC2 tags "Environment" to filter instances
#           EC2_TAG_VALUE: ${{ secrets.EC2_TAG_VALUE }} 
#         run: |
#           sudo apt-get install jq
#           export INSTANCE_IPS=$(aws ec2 describe-instances --output json --filters "Name=tag:$EC2_TAG_NAME,Values=$EC2_TAG_VALUE" | jq ".Reservations[].Instances[].PublicIpAddress" | paste -d, -s - | tr -d '"')
#           [ -z "$INSTANCE_IPS" ] && echo "No IPs found" && exit 1
#           echo "INSTANCE_IPS=$INSTANCE_IPS"
#           echo "INSTANCE_IPS=$INSTANCE_IPS" >> $GITHUB_OUTPUT

#       - name: Deploy Node.Js to EC2
#         env:
#           INSTANCE_IPS: ${{ steps.ip_addresses.outputs.INSTANCE_IPS }}
#           DOCKER_IMAGE: "${{ secrets.DOCKER_USERNAME }}/my-api-server:${{ env.my_env == 'production' && 'latest' || env.my_env }}"
#         run: |
#           for IP in ${INSTANCE_IPS//,/$'\n'}
#           do
#           ssh -o StrictHostKeyChecking=no -i /tmp/ec2-key.pem ${{ secrets.EC2_USER }}@${IP} "
#             docker pull $DOCKER_IMAGE && \
#             docker stop nodejs-app || true && \
#             docker rm nodejs-app || true && \
#             docker run -d --name nodejs-app -p 3000:3000 $DOCKER_IMAGE
#           "
#           done

#       - name: Cleanup SSH Key
#         run: rm /tmp/ec2-key.pem
